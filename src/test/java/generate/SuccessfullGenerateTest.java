package generate;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.IOException;
import java.util.List;

import static com.poczinha.log.helper.generate.GenerateHelper.execute;
import static com.poczinha.log.helper.generate.GenerateHelper.fileToString;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class SuccessfullGenerateTest {

    private static final String INPUT_OK_DIRECTORY = "src/main/java/com/poczinha/log/helper/ok/";
    private static final String OUTPUT_OK_DIRECTORY = "target/generated-sources/annotations/com/poczinha/log/audit/log/";

    @BeforeAll
    public static void shouldGenerateTheExpectedFiles() {
        List<File> fileToCompile = List.of(
                new File("src/main/java/com/poczinha/log/LogApplication.java"),
                new File(INPUT_OK_DIRECTORY + "entity/BearEntity.java"),
                new File(INPUT_OK_DIRECTORY + "entity/PersonEntity.java"),
                new File(INPUT_OK_DIRECTORY + "repository/BearRepository.java"),
                new File(INPUT_OK_DIRECTORY + "repository/PersonRepository.java")
        );

        execute(fileToCompile);
    }

    @Test
    @DisplayName("Should generate aspect files correctly")
    void shouldGenerateAspectFilesCorrectly() throws IOException {
        String bear = fileToString(OUTPUT_OK_DIRECTORY + "aspect/BearEntityLogAspect.java");
        String person = fileToString(OUTPUT_OK_DIRECTORY + "aspect/PersonEntityLogAspect.java");

        assertEquals("package com.poczinha.log.audit.log.aspect;\n\nimport com.poczinha.log.audit.log.service.BearEntityLogService;\nimport com.poczinha.log.bean.LogSessionRegisterManager;\nimport com.poczinha.log.helper.ok.entity.BearEntity;\nimport com.poczinha.log.hibernate.entity.LogRegisterEntity;\nimport java.lang.Integer;\nimport java.lang.Object;\nimport java.lang.Throwable;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@Component\n@Generated(\n    value = \"audit.log.processor.Processor\",\n    comments = \"Listeners of repository for entity BearEntity\"\n)\npublic class BearEntityLogAspect {\n  @Autowired\n  private BearEntityLogService bearEntityLogService;\n\n  @Autowired\n  private LogSessionRegisterManager logSessionRegisterManager;\n\n  @Around(\"execution(* com.poczinha.log.helper.ok.repository.BearRepository.save(..))\")\n  public Object beforeSaveBearEntity(ProceedingJoinPoint jp) throws Throwable {\n    if (logSessionRegisterManager.canLog()) {\n      BearEntity entity = (BearEntity) jp.getArgs()[0];\n      List<LogRegisterEntity> registers = bearEntityLogService.processLogCreateUpdate(entity);\n      Object result = logSessionRegisterManager.execute(jp);\n      logSessionRegisterManager.addRegisterEntities(registers, entity.getId());\n      return result;\n    } else {\n      return jp.proceed();\n    }\n  }\n\n  @Around(\"execution(* com.poczinha.log.helper.ok.repository.BearRepository.deleteById(..))\")\n  public Object beforeDeleteBearEntity(ProceedingJoinPoint jp) throws Throwable {\n    if (logSessionRegisterManager.canLog()) {\n      Integer entityId = (Integer) jp.getArgs()[0];\n      List<LogRegisterEntity> registers = bearEntityLogService.processLogDelete();\n      return logSessionRegisterManager.executeAndRegister(jp, registers, entityId);\n    } else {\n      return jp.proceed();\n    }\n  }\n}\n", bear);
        assertEquals("package com.poczinha.log.audit.log.aspect;\n\nimport com.poczinha.log.audit.log.service.PersonEntityLogService;\nimport com.poczinha.log.bean.LogSessionRegisterManager;\nimport com.poczinha.log.helper.ok.entity.PersonEntity;\nimport com.poczinha.log.hibernate.entity.LogRegisterEntity;\nimport java.lang.Long;\nimport java.lang.Object;\nimport java.lang.Throwable;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@Component\n@Generated(\n    value = \"audit.log.processor.Processor\",\n    comments = \"Listeners of repository for entity PersonEntity\"\n)\npublic class PersonEntityLogAspect {\n  @Autowired\n  private PersonEntityLogService personEntityLogService;\n\n  @Autowired\n  private LogSessionRegisterManager logSessionRegisterManager;\n\n  @Around(\"execution(* com.poczinha.log.helper.ok.repository.PersonRepository.save(..))\")\n  public Object beforeSavePersonEntity(ProceedingJoinPoint jp) throws Throwable {\n    if (logSessionRegisterManager.canLog()) {\n      PersonEntity entity = (PersonEntity) jp.getArgs()[0];\n      List<LogRegisterEntity> registers = personEntityLogService.processLogCreateUpdate(entity);\n      Object result = logSessionRegisterManager.execute(jp);\n      logSessionRegisterManager.addRegisterEntities(registers, entity.getId());\n      return result;\n    } else {\n      return jp.proceed();\n    }\n  }\n\n  @Around(\"execution(* com.poczinha.log.helper.ok.repository.PersonRepository.deleteById(..))\")\n  public Object beforeDeletePersonEntity(ProceedingJoinPoint jp) throws Throwable {\n    if (logSessionRegisterManager.canLog()) {\n      Long entityId = (Long) jp.getArgs()[0];\n      List<LogRegisterEntity> registers = personEntityLogService.processLogDelete();\n      return logSessionRegisterManager.executeAndRegister(jp, registers, entityId);\n    } else {\n      return jp.proceed();\n    }\n  }\n}\n", person);
    }

    @Test
    @DisplayName("Should generate configuration file corectly")
    void shouldGenearteConfigurationFileCorrectly() throws IOException {
        String configuration = fileToString(OUTPUT_OK_DIRECTORY + "configuration/LogBeanConfiguration.java");

        assertEquals("package com.poczinha.log.audit.log.configuration;\n\nimport javax.annotation.processing.Generated;\nimport org.springframework.boot.autoconfigure.domain.EntityScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n\n@Configuration\n@Generated(\n    value = \"audit.log.processor.Processor\",\n    comments = \"Globals log configuration\"\n)\n@EntityScan(\n    basePackages = {\"com.poczinha.log.helper.ok.entity\", \"com.poczinha.log.hibernate.entity\"}\n)\n@EnableJpaRepositories(\n    basePackages = {\"com.poczinha.log.helper.ok.repository\", \"com.poczinha.log.hibernate.repository\"}\n)\nclass LogBeanConfiguration {\n}\n", configuration);
    }

    @Test
    @DisplayName("Should generate resolver correctly")
    void ShouldGenerateResolverCorrectly() throws IOException {
        String bear = fileToString(OUTPUT_OK_DIRECTORY + "resolver/BearEntityLogResolver.java");
        String person = fileToString(OUTPUT_OK_DIRECTORY + "resolver/PersonEntityLogResolver.java");

        assertEquals("package com.poczinha.log.audit.log.resolver;\n\nimport com.poczinha.log.helper.ok.entity.BearEntity;\nimport com.poczinha.log.helper.ok.entity.PersonEntity;\nimport com.poczinha.log.processor.util.Util;\nimport java.lang.IllegalStateException;\nimport java.lang.Object;\nimport java.lang.String;\nimport javax.annotation.processing.Generated;\nimport org.hibernate.engine.spi.EntityEntry;\nimport org.hibernate.engine.spi.SessionImplementor;\nimport org.hibernate.persister.entity.EntityPersister;\n\n@Generated(\n    value = \"audit.log.processor.Processor\",\n    comments = \"Extract database context values for entity BearEntity\"\n)\npublic class BearEntityLogResolver {\n  private String name;\n\n  private int age;\n\n  private PersonEntity food;\n\n  public BearEntityLogResolver(SessionImplementor session, BearEntity entity) {\n    EntityEntry entry = Util.getEntityEntry(session, entity);\n    EntityPersister persistence = Util.getEntityPersister(session, entity);\n\n    if (entry != null && persistence != null) {\n      Object[] loadedState = entry.getLoadedState();\n\n      int nameIndex = Util.getIndexFromPropertyName(persistence, \"name\");\n      int ageIndex = Util.getIndexFromPropertyName(persistence, \"age\");\n      int foodIndex = Util.getIndexFromPropertyName(persistence, \"food\");\n\n      this.name = (String) loadedState[nameIndex];\n      this.age = (int) loadedState[ageIndex];\n      this.food = (PersonEntity) loadedState[foodIndex];\n\n    } else {\n      throw new IllegalStateException(\"Persistence context not found for entity BearEntity\");\n    }\n  }\n\n  public String getName() {\n    return this.name;\n  }\n\n  public int getAge() {\n    return this.age;\n  }\n\n  public PersonEntity getFood() {\n    return this.food;\n  }\n}\n", bear);
        assertEquals("package com.poczinha.log.audit.log.resolver;\n\nimport com.poczinha.log.helper.ok.entity.PersonEntity;\nimport com.poczinha.log.processor.util.Util;\nimport java.lang.IllegalStateException;\nimport java.lang.Object;\nimport java.lang.String;\nimport javax.annotation.processing.Generated;\nimport org.hibernate.engine.spi.EntityEntry;\nimport org.hibernate.engine.spi.SessionImplementor;\nimport org.hibernate.persister.entity.EntityPersister;\n\n@Generated(\n    value = \"audit.log.processor.Processor\",\n    comments = \"Extract database context values for entity PersonEntity\"\n)\npublic class PersonEntityLogResolver {\n  private String name;\n\n  private int age;\n\n  private boolean active;\n\n  private double salary;\n\n  public PersonEntityLogResolver(SessionImplementor session, PersonEntity entity) {\n    EntityEntry entry = Util.getEntityEntry(session, entity);\n    EntityPersister persistence = Util.getEntityPersister(session, entity);\n\n    if (entry != null && persistence != null) {\n      Object[] loadedState = entry.getLoadedState();\n\n      int nameIndex = Util.getIndexFromPropertyName(persistence, \"name\");\n      int ageIndex = Util.getIndexFromPropertyName(persistence, \"age\");\n      int activeIndex = Util.getIndexFromPropertyName(persistence, \"active\");\n      int salaryIndex = Util.getIndexFromPropertyName(persistence, \"salary\");\n\n      this.name = (String) loadedState[nameIndex];\n      this.age = (int) loadedState[ageIndex];\n      this.active = (boolean) loadedState[activeIndex];\n      this.salary = (double) loadedState[salaryIndex];\n\n    } else {\n      throw new IllegalStateException(\"Persistence context not found for entity PersonEntity\");\n    }\n  }\n\n  public String getName() {\n    return this.name;\n  }\n\n  public int getAge() {\n    return this.age;\n  }\n\n  public boolean isActive() {\n    return this.active;\n  }\n\n  public double getSalary() {\n    return this.salary;\n  }\n}\n", person);
    }

    @Test
    @DisplayName("Should generate service correctly")
    void shouldGenerateServiceCorrectly() throws IOException {
        String bear = fileToString(OUTPUT_OK_DIRECTORY + "service/BearEntityLogService.java");
        String person = fileToString(OUTPUT_OK_DIRECTORY + "service/PersonEntityLogService.java");

        assertEquals("package com.poczinha.log.audit.log.service;\n\nimport com.poczinha.log.audit.log.resolver.BearEntityLogResolver;\nimport com.poczinha.log.bean.LogColumnCache;\nimport com.poczinha.log.helper.ok.entity.BearEntity;\nimport com.poczinha.log.hibernate.entity.LogColumnEntity;\nimport com.poczinha.log.hibernate.entity.LogRegisterEntity;\nimport com.poczinha.log.processor.util.Util;\nimport com.poczinha.log.service.RegisterService;\nimport java.lang.String;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport javax.persistence.EntityManager;\nimport org.hibernate.Session;\nimport org.hibernate.engine.spi.SessionImplementor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\n@Generated(\n    value = \"audit.log.processor.Processor\",\n    comments = \"Service to process entity modifications of BearEntity\"\n)\npublic class BearEntityLogService {\n  public static final String NAME = \"Name of Sr Bear\";\n\n  public static final String AGE = \"Age of Sr Bear\";\n\n  public static final String FOOD = \"Food of Sr Bear\";\n\n  public static final String TABLE_NAME = \"Sr Bear\";\n\n  @Autowired\n  private RegisterService registerService;\n\n  @Autowired\n  private EntityManager entityManager;\n\n  @Autowired\n  private LogColumnCache logColumnCache;\n\n  public List<LogRegisterEntity> processLogCreateUpdate(BearEntity request) {\n    LogColumnEntity columnEntity;\n    List<LogRegisterEntity> registers = new ArrayList<>(3);\n\n    if (request.getId() != null) {\n      Session session = entityManager.unwrap(Session.class);\n      BearEntityLogResolver dbEntity = new BearEntityLogResolver((SessionImplementor) session, request);\n\n      columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, NAME);\n      if (columnEntity.isActive() && Util.obNotEquals(dbEntity.getName(), request.getName())) {\n        registers.add(registerService.processUpdate(columnEntity, Util.valueOf(request.getName())));\n      }\n      columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, AGE);\n      if (columnEntity.isActive() && request.getAge() != dbEntity.getAge()) {\n        registers.add(registerService.processUpdate(columnEntity, Util.valueOf(request.getAge())));\n      }\n      columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, FOOD);\n      if (columnEntity.isActive() && Util.obNotEquals(dbEntity.getFood(), request.getFood())) {\n        registers.add(registerService.processUpdate(columnEntity, Util.valueOf(request.getFood())));\n      }\n    } else {\n\n      columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, NAME);\n      if (columnEntity.isActive()) {\n        registers.add(registerService.processCreate(columnEntity, Util.valueOf(request.getName())));\n      }\n      columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, AGE);\n      if (columnEntity.isActive()) {\n        registers.add(registerService.processCreate(columnEntity, Util.valueOf(request.getAge())));\n      }\n      columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, FOOD);\n      if (columnEntity.isActive()) {\n        registers.add(registerService.processCreate(columnEntity, Util.valueOf(request.getFood())));\n      }\n    }\n\n    return registers;\n  }\n\n  public List<LogRegisterEntity> processLogDelete() {\n    LogColumnEntity columnEntity;\n    List<LogRegisterEntity> registers = new ArrayList<>(3);\n\n    columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, NAME);\n    if (columnEntity.isActive()) {\n      registers.add(registerService.processDelete(columnEntity));\n    }\n    columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, AGE);\n    if (columnEntity.isActive()) {\n      registers.add(registerService.processDelete(columnEntity));\n    }\n    columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, FOOD);\n    if (columnEntity.isActive()) {\n      registers.add(registerService.processDelete(columnEntity));\n    }\n\n    return registers;\n  }\n}\n", bear);
        assertEquals("package com.poczinha.log.audit.log.service;\n\nimport com.poczinha.log.audit.log.resolver.PersonEntityLogResolver;\nimport com.poczinha.log.bean.LogColumnCache;\nimport com.poczinha.log.helper.ok.entity.PersonEntity;\nimport com.poczinha.log.hibernate.entity.LogColumnEntity;\nimport com.poczinha.log.hibernate.entity.LogRegisterEntity;\nimport com.poczinha.log.processor.util.Util;\nimport com.poczinha.log.service.RegisterService;\nimport java.lang.String;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport javax.persistence.EntityManager;\nimport org.hibernate.Session;\nimport org.hibernate.engine.spi.SessionImplementor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\n@Generated(\n    value = \"audit.log.processor.Processor\",\n    comments = \"Service to process entity modifications of PersonEntity\"\n)\npublic class PersonEntityLogService {\n  public static final String NAME = \"name\";\n\n  public static final String AGE = \"age\";\n\n  public static final String ACTIVE = \"active\";\n\n  public static final String SALARY = \"salary\";\n\n  public static final String TABLE_NAME = \"PersonEntity\";\n\n  @Autowired\n  private RegisterService registerService;\n\n  @Autowired\n  private EntityManager entityManager;\n\n  @Autowired\n  private LogColumnCache logColumnCache;\n\n  public List<LogRegisterEntity> processLogCreateUpdate(PersonEntity request) {\n    LogColumnEntity columnEntity;\n    List<LogRegisterEntity> registers = new ArrayList<>(4);\n\n    if (request.getId() != null) {\n      Session session = entityManager.unwrap(Session.class);\n      PersonEntityLogResolver dbEntity = new PersonEntityLogResolver((SessionImplementor) session, request);\n\n      columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, NAME);\n      if (columnEntity.isActive() && Util.obNotEquals(dbEntity.getName(), request.getName())) {\n        registers.add(registerService.processUpdate(columnEntity, Util.valueOf(request.getName())));\n      }\n      columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, AGE);\n      if (columnEntity.isActive() && request.getAge() != dbEntity.getAge()) {\n        registers.add(registerService.processUpdate(columnEntity, Util.valueOf(request.getAge())));\n      }\n      columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, ACTIVE);\n      if (columnEntity.isActive() && request.isActive() != dbEntity.isActive()) {\n        registers.add(registerService.processUpdate(columnEntity, Util.valueOf(request.isActive())));\n      }\n      columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, SALARY);\n      if (columnEntity.isActive() && Util.nuNotEquals(dbEntity.getSalary(), request.getSalary())) {\n        registers.add(registerService.processUpdate(columnEntity, Util.valueOf(request.getSalary())));\n      }\n    } else {\n\n      columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, NAME);\n      if (columnEntity.isActive()) {\n        registers.add(registerService.processCreate(columnEntity, Util.valueOf(request.getName())));\n      }\n      columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, AGE);\n      if (columnEntity.isActive()) {\n        registers.add(registerService.processCreate(columnEntity, Util.valueOf(request.getAge())));\n      }\n      columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, ACTIVE);\n      if (columnEntity.isActive()) {\n        registers.add(registerService.processCreate(columnEntity, Util.valueOf(request.isActive())));\n      }\n      columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, SALARY);\n      if (columnEntity.isActive()) {\n        registers.add(registerService.processCreate(columnEntity, Util.valueOf(request.getSalary())));\n      }\n    }\n\n    return registers;\n  }\n\n  public List<LogRegisterEntity> processLogDelete() {\n    LogColumnEntity columnEntity;\n    List<LogRegisterEntity> registers = new ArrayList<>(4);\n\n    columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, NAME);\n    if (columnEntity.isActive()) {\n      registers.add(registerService.processDelete(columnEntity));\n    }\n    columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, AGE);\n    if (columnEntity.isActive()) {\n      registers.add(registerService.processDelete(columnEntity));\n    }\n    columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, ACTIVE);\n    if (columnEntity.isActive()) {\n      registers.add(registerService.processDelete(columnEntity));\n    }\n    columnEntity = logColumnCache.retrieveOrStore(TABLE_NAME, SALARY);\n    if (columnEntity.isActive()) {\n      registers.add(registerService.processDelete(columnEntity));\n    }\n\n    return registers;\n  }\n}\n", person);
    }
}
